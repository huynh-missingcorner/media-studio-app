{
  "openapi": "3.0.0",
  "paths": {
    "/api/health": {
      "get": {
        "operationId": "AppController_healthCheck",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": ["App"]
      }
    },
    "/api/auth/register": {
      "post": {
        "operationId": "AuthController_register",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User successfully registered",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Invalid invite code"
          },
          "409": {
            "description": "User with this email already exists"
          }
        },
        "summary": "Register a new user",
        "tags": ["Authentication"]
      }
    },
    "/api/auth/login": {
      "post": {
        "operationId": "AuthController_login",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User successfully logged in",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Invalid credentials"
          }
        },
        "summary": "User login",
        "tags": ["Authentication"]
      }
    },
    "/api/auth/refresh": {
      "post": {
        "operationId": "AuthController_refresh",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefreshTokenDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Token successfully refreshed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Invalid refresh token"
          }
        },
        "summary": "Refresh access token",
        "tags": ["Authentication"]
      }
    },
    "/api/users/profile": {
      "get": {
        "operationId": "UserController_getProfile",
        "parameters": [],
        "responses": {
          "200": {
            "description": "The found user profile",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProfileDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get user profile",
        "tags": ["User Profile"]
      },
      "patch": {
        "operationId": "UserController_updateProfile",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProfileDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The updated user profile",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProfileDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update user profile",
        "tags": ["User Profile"]
      }
    },
    "/api/api/projects": {
      "get": {
        "operationId": "ProjectController_getAllProjects",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Return all projects"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all projects",
        "tags": ["Projects"]
      },
      "post": {
        "operationId": "ProjectController_createProject",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateProjectDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Project created successfully"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create a new project (Admin only)",
        "tags": ["Projects"]
      }
    },
    "/api/api/projects/{id}": {
      "get": {
        "operationId": "ProjectController_getProjectById",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return the project"
          },
          "404": {
            "description": "Project not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get project details by ID",
        "tags": ["Projects"]
      },
      "patch": {
        "operationId": "ProjectController_updateProject",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProjectDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update project by ID (Admin only)",
        "tags": ["Projects"]
      },
      "delete": {
        "operationId": "ProjectController_deleteProject",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete project by ID (Admin only)",
        "tags": ["Projects"]
      }
    },
    "/api/media/image": {
      "post": {
        "operationId": "MediaController_generateImage",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ImageGenerationDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Image generation request created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MediaResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Generate an image using Vertex AI Media Studio",
        "tags": ["Media"]
      }
    },
    "/api/media/image/upscale": {
      "post": {
        "operationId": "MediaController_upscaleImage",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ImageUpscaleDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Image upscaling request created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MediaResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Upscale an image using Vertex AI Media Studio",
        "tags": ["Media"]
      }
    },
    "/api/media/video/async": {
      "post": {
        "operationId": "MediaController_generateVideoAsync",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VideoGenerationDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Async video generation request initiated"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Generate a video asynchronously using Vertex AI Media Studio",
        "tags": ["Media"]
      }
    },
    "/api/media/video/status": {
      "get": {
        "operationId": "MediaController_getVideoGenerationResults",
        "parameters": [
          {
            "name": "operationId",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Video generation status retrieved"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get the status of a video generation request",
        "tags": ["Media"]
      }
    },
    "/api/media/music": {
      "post": {
        "operationId": "MediaController_generateMusic",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MusicGenerationDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Music generation request created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MediaResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Generate music using Vertex AI Media Studio",
        "tags": ["Media"]
      }
    },
    "/api/media/audio": {
      "post": {
        "operationId": "MediaController_generateAudio",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AudioGenerationDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Audio generation request created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MediaResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Generate speech using Vertex AI Media Studio",
        "tags": ["Media"]
      }
    },
    "/api/media/history": {
      "get": {
        "operationId": "MediaController_getMediaHistory",
        "parameters": [
          {
            "name": "page",
            "required": true,
            "in": "query",
            "description": "Page number (1-based)",
            "schema": {
              "minimum": 1,
              "default": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": true,
            "in": "query",
            "description": "Number of items per page",
            "schema": {
              "minimum": 1,
              "maximum": 100,
              "default": 10,
              "type": "number"
            }
          },
          {
            "name": "mediaType",
            "required": false,
            "in": "query",
            "description": "The type of media to filter by",
            "schema": {
              "example": "IMAGE",
              "type": "string"
            }
          },
          {
            "name": "status",
            "required": false,
            "in": "query",
            "description": "The status of the media to filter by",
            "schema": {
              "example": "PENDING",
              "type": "string"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "The search query to filter by",
            "schema": {
              "example": "sunset",
              "type": "string"
            }
          },
          {
            "name": "projectId",
            "required": false,
            "in": "query",
            "description": "The ID of the project to filter by",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Media generation history retrieved"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get history of media generation requests",
        "tags": ["Media"]
      }
    },
    "/api/media/{id}": {
      "get": {
        "operationId": "MediaController_getMediaRequestById",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Media generation request found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MediaResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Media generation request not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get a media generation request by ID",
        "tags": ["Media"]
      }
    },
    "/api/files/upload": {
      "post": {
        "operationId": "FileController_uploadFile",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary",
                    "description": "File to upload"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "File successfully uploaded",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UploadFileResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid file upload"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Upload a file to Google Cloud Storage",
        "tags": ["files"]
      }
    },
    "/api/files/upload-multiple": {
      "post": {
        "operationId": "FileController_uploadMultipleFiles",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "files": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "binary"
                    },
                    "description": "Files to upload (maximum 10)"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Files successfully uploaded",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MultipleUploadFileResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid file upload"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Upload multiple files to Google Cloud Storage",
        "tags": ["files"]
      }
    },
    "/api/files/download": {
      "get": {
        "operationId": "FileController_downloadFile",
        "parameters": [
          {
            "name": "gcsUri",
            "required": true,
            "in": "query",
            "description": "Google Cloud Storage URI of the file to download",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "File successfully downloaded"
          },
          "400": {
            "description": "Invalid GCS URI provided"
          },
          "404": {
            "description": "File not found in storage"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Download a file from Google Cloud Storage",
        "tags": ["files"]
      }
    },
    "/api/files/signed-url": {
      "get": {
        "operationId": "FileController_getSignedUrl",
        "parameters": [
          {
            "name": "gcsUri",
            "required": true,
            "in": "query",
            "description": "Google Cloud Storage URI of the file",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Signed URL retrieved"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get a signed URL for a media file",
        "tags": ["files"]
      }
    }
  },
  "info": {
    "title": "Vertex AI Media Generation API",
    "description": "API for the Vertex AI Media Generation wrapper",
    "version": "1.0",
    "contact": {}
  },
  "tags": [],
  "servers": [],
  "components": {
    "securitySchemes": {
      "bearer": {
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "type": "http"
      }
    },
    "schemas": {
      "RegisterDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "User email address",
            "example": "user@example.com"
          },
          "password": {
            "type": "string",
            "description": "User password (minimum 8 characters, must include at least one uppercase letter, one lowercase letter, and one number)",
            "example": "Password123"
          },
          "firstName": {
            "type": "string",
            "description": "User first name",
            "example": "John"
          },
          "lastName": {
            "type": "string",
            "description": "User last name",
            "example": "Doe"
          },
          "inviteCode": {
            "type": "string",
            "description": "Required invite code for registration. Contact administrators to obtain a valid code.",
            "example": "INVITE_CODE_2024"
          }
        },
        "required": ["email", "password", "firstName", "lastName", "inviteCode"]
      },
      "ProfileDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "User email address",
            "example": "user@example.com"
          },
          "firstName": {
            "type": "string",
            "description": "User first name",
            "example": "John"
          },
          "lastName": {
            "type": "string",
            "description": "User last name",
            "example": "Doe"
          }
        },
        "required": ["email", "firstName", "lastName"]
      },
      "AuthResponseDto": {
        "type": "object",
        "properties": {
          "accessToken": {
            "type": "string",
            "description": "JWT access token",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
          },
          "refreshToken": {
            "type": "string",
            "description": "JWT refresh token",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
          },
          "expiresIn": {
            "type": "number",
            "description": "Token expiration time in seconds",
            "example": 900
          },
          "userId": {
            "type": "string",
            "description": "User ID",
            "example": "5f9d5b3b9d3f2c1b4c7f8b1a"
          },
          "role": {
            "type": "string",
            "description": "User role",
            "enum": ["ADMIN", "USER"],
            "example": "USER"
          },
          "user": {
            "description": "User profile",
            "allOf": [
              {
                "$ref": "#/components/schemas/ProfileDto"
              }
            ]
          }
        },
        "required": [
          "accessToken",
          "refreshToken",
          "expiresIn",
          "userId",
          "role",
          "user"
        ]
      },
      "LoginDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "User email address",
            "example": "user@example.com"
          },
          "password": {
            "type": "string",
            "description": "User password",
            "example": "Password123"
          }
        },
        "required": ["email", "password"]
      },
      "RefreshTokenDto": {
        "type": "object",
        "properties": {
          "refreshToken": {
            "type": "string",
            "description": "Refresh token",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
          }
        },
        "required": ["refreshToken"]
      },
      "UpdateProfileDto": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string",
            "description": "User first name",
            "example": "John"
          },
          "lastName": {
            "type": "string",
            "description": "User last name",
            "example": "Doe"
          }
        }
      },
      "CreateProjectDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Project name",
            "example": "My AI Media Project"
          },
          "description": {
            "type": "string",
            "description": "Project description",
            "example": "A project for generating AI media content"
          },
          "googleProjectId": {
            "type": "string",
            "description": "Google Cloud Project ID",
            "example": "my-gcp-project-123"
          }
        },
        "required": ["name"]
      },
      "UpdateProjectDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Project name",
            "example": "My AI Media Project"
          },
          "description": {
            "type": "string",
            "description": "Project description",
            "example": "A project for generating AI media content"
          },
          "googleProjectId": {
            "type": "string",
            "description": "Google Cloud Project ID",
            "example": "my-gcp-project-123"
          }
        }
      },
      "ReferenceImageDto": {
        "type": "object",
        "properties": {
          "gcsUri": {
            "type": "string",
            "description": "The gcs uri for the reference image",
            "example": "gs://bucket/image.jpg"
          },
          "bytesBase64Encoded": {
            "type": "string",
            "description": "The bytes base64 encoded for the reference image",
            "example": "iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAQAAAC1HAwCAAAAC0lEQVR42mP8/x8AAwMCAO+ip1sAAAAASUVORK5CYII="
          }
        },
        "required": ["gcsUri", "bytesBase64Encoded"]
      },
      "ReferenceDataDto": {
        "type": "object",
        "properties": {
          "referenceId": {
            "type": "number",
            "description": "The reference id for the image generation",
            "example": 1
          },
          "description": {
            "type": "string",
            "description": "The description for the reference data",
            "example": "A beautiful landscape"
          },
          "referenceType": {
            "type": "string",
            "description": "The reference type for the image generation",
            "example": "default"
          },
          "secondaryReferenceType": {
            "type": "string",
            "description": "The secondary reference type for the image generation",
            "example": "SUBJECT_TYPE_DEFAULT"
          },
          "referenceImage": {
            "description": "The reference image for the image generation",
            "allOf": [
              {
                "$ref": "#/components/schemas/ReferenceImageDto"
              }
            ]
          }
        },
        "required": [
          "referenceId",
          "description",
          "referenceType",
          "secondaryReferenceType",
          "referenceImage"
        ]
      },
      "ImageGenerationDto": {
        "type": "object",
        "properties": {
          "projectId": {
            "type": "string",
            "description": "The ID of the project",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "prompt": {
            "type": "string",
            "description": "The prompt for the media generation",
            "example": "A beautiful sunset over a calm ocean"
          },
          "negativePrompt": {
            "type": "string",
            "description": "The negative prompt for the media generation",
            "example": "low quality, blurry, distorted",
            "default": ""
          },
          "mediaType": {
            "type": "string",
            "description": "The type of media to generate",
            "example": "IMAGE"
          },
          "aspectRatio": {
            "type": "string",
            "description": "The aspect ratio of the image",
            "example": "1:1"
          },
          "sampleCount": {
            "type": "number",
            "description": "The number of samples to generate",
            "example": 1,
            "default": 1
          },
          "model": {
            "type": "string",
            "description": "The model to use for the image generation",
            "default": "imagen-3.0-generate-002"
          },
          "referenceData": {
            "description": "The reference data for the image generation",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReferenceDataDto"
            }
          }
        },
        "required": ["projectId", "prompt", "negativePrompt", "mediaType"]
      },
      "MediaResultDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Media result ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "resultUrl": {
            "type": "string",
            "description": "Media result URL",
            "example": "https://example.com/media-result.jpg"
          },
          "metadata": {
            "type": "object",
            "description": "Media result metadata"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Media result created at",
            "example": "2021-01-01T00:00:00.000Z"
          }
        },
        "required": ["id", "resultUrl", "metadata", "createdAt"]
      },
      "MediaResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Media generation ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "mediaType": {
            "type": "string",
            "description": "Media type",
            "example": "IMAGE"
          },
          "prompt": {
            "type": "string",
            "description": "Prompt",
            "example": "A beautiful sunset over a calm ocean"
          },
          "results": {
            "description": "Media results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MediaResultDto"
            }
          },
          "errorMessage": {
            "type": "string",
            "description": "Error message",
            "example": "An error occurred while generating the media"
          },
          "parameters": {
            "type": "object",
            "description": "Parameters"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Created at",
            "example": "2021-01-01T00:00:00.000Z"
          },
          "projectId": {
            "type": "string",
            "description": "Project ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          }
        },
        "required": [
          "id",
          "mediaType",
          "prompt",
          "results",
          "errorMessage",
          "parameters",
          "createdAt",
          "projectId"
        ]
      },
      "ImageUpscaleDto": {
        "type": "object",
        "properties": {
          "projectId": {
            "type": "string",
            "description": "The ID of the project",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "prompt": {
            "type": "string",
            "description": "The prompt for the media generation",
            "example": "A beautiful sunset over a calm ocean"
          },
          "negativePrompt": {
            "type": "string",
            "description": "The negative prompt for the media generation",
            "example": "low quality, blurry, distorted",
            "default": ""
          },
          "mediaType": {
            "type": "string",
            "description": "The type of media to generate",
            "example": "IMAGE"
          },
          "gcsUri": {
            "type": "string",
            "description": "The source image to upscale (GCS URI)",
            "example": "gs://bucket-name/source-photos/photo.png"
          },
          "upscaleFactor": {
            "type": "string",
            "description": "The upscale factor for the image",
            "enum": ["x2", "x4"],
            "default": "x2"
          },
          "model": {
            "type": "string",
            "description": "The model to use for image upscaling",
            "default": "imagegeneration@002"
          }
        },
        "required": [
          "projectId",
          "prompt",
          "negativePrompt",
          "mediaType",
          "gcsUri"
        ]
      },
      "VideoGenerationDto": {
        "type": "object",
        "properties": {
          "projectId": {
            "type": "string",
            "description": "The ID of the project",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "prompt": {
            "type": "string",
            "description": "The prompt for the media generation",
            "example": "A beautiful sunset over a calm ocean"
          },
          "negativePrompt": {
            "type": "string",
            "description": "The negative prompt for the media generation",
            "example": "low quality, blurry, distorted",
            "default": ""
          },
          "mediaType": {
            "type": "string",
            "description": "The type of media to generate",
            "example": "IMAGE"
          },
          "durationSeconds": {
            "type": "number",
            "description": "The duration of the video in seconds",
            "example": 1,
            "default": 1
          },
          "aspectRatio": {
            "type": "string",
            "description": "The aspect ratio of the image",
            "example": "16:9"
          },
          "enhancePrompt": {
            "type": "boolean",
            "description": "Whether to enhance the prompt",
            "example": true,
            "default": true
          },
          "sampleCount": {
            "type": "number",
            "description": "The number of samples to generate",
            "example": 1,
            "default": 1
          },
          "model": {
            "type": "string",
            "description": "The model to use for the image generation",
            "default": "veo-2.0-generate-001"
          },
          "seed": {
            "type": "number",
            "description": "The seed for the video generation"
          },
          "referenceImage": {
            "description": "The reference image for video generation",
            "allOf": [
              {
                "$ref": "#/components/schemas/ReferenceImageDto"
              }
            ]
          }
        },
        "required": [
          "projectId",
          "prompt",
          "negativePrompt",
          "mediaType",
          "durationSeconds",
          "aspectRatio",
          "enhancePrompt",
          "sampleCount",
          "model",
          "seed"
        ]
      },
      "MusicGenerationDto": {
        "type": "object",
        "properties": {
          "projectId": {
            "type": "string",
            "description": "The ID of the project",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "prompt": {
            "type": "string",
            "description": "The prompt for the media generation",
            "example": "A beautiful sunset over a calm ocean"
          },
          "negativePrompt": {
            "type": "string",
            "description": "The negative prompt for the media generation",
            "example": "low quality, blurry, distorted",
            "default": ""
          },
          "mediaType": {
            "type": "string",
            "description": "The type of media to generate",
            "example": "IMAGE"
          },
          "durationSeconds": {
            "type": "number",
            "description": "The duration of the music in seconds",
            "example": 1,
            "default": 1
          },
          "genre": {
            "type": "string",
            "description": "The genre of the music",
            "example": "POP"
          },
          "instrument": {
            "type": "string",
            "description": "The instrument of the music",
            "example": "Piano"
          },
          "tempo": {
            "type": "number",
            "description": "The tempo of the music",
            "example": 0.5
          },
          "seed": {
            "type": "number",
            "description": "The seed for the music generation",
            "example": 123
          }
        },
        "required": [
          "projectId",
          "prompt",
          "negativePrompt",
          "mediaType",
          "durationSeconds",
          "genre",
          "instrument",
          "tempo",
          "seed"
        ]
      },
      "AudioGenerationDto": {
        "type": "object",
        "properties": {
          "projectId": {
            "type": "string",
            "description": "The ID of the project",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "prompt": {
            "type": "string",
            "description": "The prompt for the media generation",
            "example": "A beautiful sunset over a calm ocean"
          },
          "negativePrompt": {
            "type": "string",
            "description": "The negative prompt for the media generation",
            "example": "low quality, blurry, distorted",
            "default": ""
          },
          "mediaType": {
            "type": "string",
            "description": "The type of media to generate",
            "example": "IMAGE"
          },
          "durationSeconds": {
            "type": "number",
            "description": "The duration of the audio in seconds",
            "example": 1,
            "default": 1
          },
          "audioStyle": {
            "type": "string",
            "description": "The style of the audio",
            "example": "Jazz"
          },
          "seed": {
            "type": "number",
            "description": "The seed for the audio generation",
            "example": 123
          }
        },
        "required": [
          "projectId",
          "prompt",
          "negativePrompt",
          "mediaType",
          "durationSeconds",
          "audioStyle",
          "seed"
        ]
      },
      "UploadFileResponseDto": {
        "type": "object",
        "properties": {
          "gcsUri": {
            "type": "string",
            "description": "Google Cloud Storage URI of the uploaded file",
            "example": "gs://your-bucket-name/path/to/file.jpg"
          },
          "signedUrl": {
            "type": "string",
            "description": "Signed URL for temporary access to the file",
            "example": "https://storage.googleapis.com/your-bucket-name/path/to/file.jpg?X-Goog-Signature=..."
          }
        },
        "required": ["gcsUri", "signedUrl"]
      },
      "FileInfo": {
        "type": "object",
        "properties": {
          "gcsUri": {
            "type": "string",
            "description": "Google Cloud Storage URI of the uploaded file",
            "example": "gs://your-bucket-name/path/to/file.jpg"
          },
          "signedUrl": {
            "type": "string",
            "description": "Signed URL for temporary access to the file",
            "example": "https://storage.googleapis.com/your-bucket-name/path/to/file.jpg?X-Goog-Signature=..."
          }
        },
        "required": ["gcsUri", "signedUrl"]
      },
      "MultipleUploadFileResponseDto": {
        "type": "object",
        "properties": {
          "files": {
            "description": "Array of file information including GCS URIs and signed URLs",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FileInfo"
            }
          }
        },
        "required": ["files"]
      }
    }
  }
}
